---
import config from '../../config.json';
import OfferBanner from './OfferBanner.astro';
---

<header class="header">
  <div class="header-top">
    <div class="container">
      <div class="header-content">
        <a href="/" class="logo">
          <img src="/assets/images/general/All Seasons Living SVG Logo.svg" alt="All Seasons Living" />
        </a>

        <nav class="nav">
          <ul class="nav-menu">
            <li><a href="/">Home</a></li>
            <li class="has-dropdown">
              <a href="#" class="dropdown-toggle">
                Our Products
                <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">
                  <path d="M6 9L1 4h10L6 9z"/>
                </svg>
              </a>
              <ul class="dropdown-menu">
                <li><a href="/outdoor-blinds">Outdoor Blinds</a></li>
                <li><a href="/artificial-lawn">Artificial Lawn</a></li>
                <li><a href="/roller-shutters">Roller Shutters</a></li>
                <li><a href="#" class="coming-soon">Plantation Shutters <span>(Coming Soon)</span></a></li>
              </ul>
            </li>
            <li><a href="/about">About</a></li>
            <li><a href="/contact">Contact</a></li>
          </ul>
        </nav>

        <div class="header-actions">
          <button class="btn btn-primary" id="quoteBtn">
            FREE MEASURE & QUOTE
          </button>

          <a href={`tel:${config.contact.phone.replace(/\s/g, '')}`} class="btn btn-secondary" data-location="header">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
            </svg>
            {config.contact.phone}
          </a>
        </div>

        <button class="mobile-menu-toggle" aria-label="Toggle menu">
          <span></span>
          <span></span>
          <span></span>
        </button>
      </div>
    </div>
  </div>

  <OfferBanner />
</header>

<style>
  /* Mobile-First Approach - Base styles are for mobile */
  .header {
    position: relative;
    z-index: 1000;
    background: var(--white);
    box-shadow: var(--shadow-sm);
    contain: layout;
  }

  .header-top {
    background: var(--white);
    padding: 0;
    min-height: auto;
    display: flex;
    align-items: center;
  }

  .header-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 0;
    width: 100%;
    position: relative;
  }

  /* Mobile-first logo - centered at top */
  .logo {
    width: 100%;
    display: flex;
    justify-content: center;
    padding: 12px 0 20px 0;
  }

  .logo img {
    height: 60px;
    width: auto;
    display: block;
  }

  /* Mobile header actions - stacked vertically below logo */
  .header-actions {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    width: 100%;
    padding: 0 12px 12px 12px;
  }

  .header-actions .btn {
    width: 100%;
    max-width: 280px;
    font-size: 15px;
    font-weight: 700;
    padding: 1rem 1.5rem;
    white-space: nowrap;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    min-height: 52px;
  }

  .header-actions .btn svg {
    width: 18px;
    height: 18px;
  }

  .btn-secondary {
    background: var(--white);
    color: var(--black);
    border: 2px solid var(--black);
  }

  .btn-secondary:hover,
  .btn-secondary:active {
    background: var(--black);
    color: var(--white);
  }

  /* Burger menu - centered below buttons */
  .mobile-menu-toggle {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 5px;
    background: none;
    border: none;
    cursor: pointer;
    padding: 12px;
    min-height: 48px; /* Touch-friendly */
    min-width: 48px;
    z-index: 1001;
    margin: 0 auto;
  }

  .mobile-menu-toggle span {
    width: 28px;
    height: 3px;
    background: var(--black);
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  /* Burger animation when active */
  .mobile-menu-toggle.active span:nth-child(1) {
    transform: rotate(45deg) translate(8px, 8px);
  }

  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-toggle.active span:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -7px);
  }

  /* Mobile navigation - hidden by default */
  .nav {
    position: absolute;
    left: 0;
    right: 0;
    top: 100%;
    background: var(--white);
    border-top: 1px solid var(--gray-border);
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
    width: 100%;
  }

  .nav.active {
    max-height: 100vh;
    overflow-y: auto;
  }

  .nav-menu {
    display: flex;
    flex-direction: column;
    gap: 0;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .nav-menu > li {
    position: relative;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  }

  .nav-menu > li > a {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 1rem 1.5rem;
    color: var(--black);
    font-weight: 600;
    text-decoration: none;
    transition: all var(--transition-base);
    min-height: 48px; /* Touch-friendly */
    font-size: 16px; /* Minimum readable size */
  }

  .nav-menu > li > a:active {
    background: var(--light-sage);
  }

  .nav-menu > li > a.active {
    color: var(--olive-green);
    background: var(--cream);
  }

  /* Mobile dropdown */
  .has-dropdown {
    position: relative;
  }

  .dropdown-menu {
    position: static;
    transform: none;
    background: var(--cream);
    box-shadow: none;
    list-style: none;
    padding: 0;
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    transition: all 0.3s ease;
  }

  .has-dropdown.active .dropdown-menu {
    max-height: 500px;
    opacity: 1;
    padding: 0.5rem 0;
  }

  .dropdown-menu li a {
    display: block;
    padding: 0.875rem 1.5rem 0.875rem 2.5rem;
    color: var(--black);
    text-decoration: none;
    transition: background var(--transition-fast);
    min-height: 48px; /* Touch-friendly */
    font-size: 15px;
  }

  .dropdown-menu li a:active {
    background: var(--light-sage);
  }

  .coming-soon {
    color: var(--gray-border) !important;
    cursor: not-allowed;
  }

  .coming-soon span {
    font-size: 0.75rem;
    opacity: 0.7;
  }

  /* Tablet Styles (768px - 1024px) */
  @media (min-width: 768px) and (max-width: 1024px) {
    .logo {
      padding: 16px 0 24px 0;
    }

    .logo img {
      height: 80px;
    }

    .header-actions {
      flex-direction: column;
    }

    .header-actions .btn {
      width: 100%;
      max-width: 320px;
      font-size: 16px;
      padding: 1rem 1.5rem;
      min-height: 54px;
    }

    .header-actions .btn svg {
      width: 20px;
      height: 20px;
    }

    .nav-menu > li > a {
      font-size: 15px;
    }
  }

  /* Desktop Styles (1025px and up) - Original design */
  @media (min-width: 1025px) {
    .header {
      position: sticky;
      top: 0;
      transition: box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .header-top {
      transition: border-bottom 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .header-content {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      transition: padding 0.5s cubic-bezier(0.4, 0, 0.2, 1), gap 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      padding: 0.5rem 0;
      /* NO transition on flex-wrap - instant change to prevent reflow */
    }

    .logo {
      width: auto;
      flex-shrink: 0;
      order: 1;
      opacity: 1;
      transition: opacity 0.3s ease;
      display: flex;
      align-items: center;
      /* NO transition on order - instant change */
    }

    .logo img {
      height: 70px;
      margin-bottom: 42px;
      transition: height 0.5s cubic-bezier(0.4, 0, 0.2, 1), margin-bottom 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      display: block;
    }

    .header-actions {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 1.5rem;
      width: auto;
      opacity: 1;
      transition: gap 0.5s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s ease;
      flex-shrink: 0;
      order: 2;
      /* NO transition on order - instant change */
    }

    .header-actions .btn {
      flex: 0;
      width: auto;
      max-width: none;
      font-size: 15px;
      font-weight: 700;
      padding: 0.875rem 1.75rem;
      min-height: 50px;
      transition: font-size 0.5s cubic-bezier(0.4, 0, 0.2, 1), padding 0.5s cubic-bezier(0.4, 0, 0.2, 1), min-height 0.5s cubic-bezier(0.4, 0, 0.2, 1), background-color 0.2s ease, transform 0.2s ease;
    }

    .header-actions .btn svg {
      width: 20px;
      height: 20px;
    }

    .mobile-menu-toggle {
      display: none;
    }

    .nav {
      position: static;
      max-height: none;
      overflow: visible;
      transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1), flex 0.5s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s ease;
      background: transparent;
      border: none;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      order: 3;
      opacity: 1;
      /* NO transition on order - instant change */
    }

    .nav-menu {
      flex-direction: row;
      justify-content: center;
      gap: 2rem;
      padding: 0.5rem 0;
      transition: gap 0.5s cubic-bezier(0.4, 0, 0.2, 1), padding 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .nav-menu > li {
      border-bottom: none;
    }

    .nav-menu > li > a {
      border-radius: var(--radius-sm);
      position: relative;
      padding: 0.75rem 1.25rem;
      transition: padding 0.5s cubic-bezier(0.4, 0, 0.2, 1), font-size 0.5s cubic-bezier(0.4, 0, 0.2, 1), color 0.2s ease, background 0.2s ease;
      white-space: nowrap;
    }

    .nav-menu > li > a:hover {
      color: var(--olive-green);
      background: var(--light-sage);
    }

    .nav-menu > li > a.active::after {
      content: '';
      position: absolute;
      bottom: 0.75rem;
      left: 1.5rem;
      right: 1.5rem;
      height: 3px;
      background: var(--olive-green);
      border-radius: 2px;
    }

    .dropdown-menu {
      position: absolute;
      top: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: var(--white);
      box-shadow: var(--shadow-lg);
      border-radius: var(--radius-sm);
      padding: 0.5rem 0;
      min-width: 220px;
      max-height: none;
      opacity: 0;
      visibility: hidden;
      z-index: 1001;
    }

    .has-dropdown:hover .dropdown-menu {
      opacity: 1;
      visibility: visible;
    }

    .has-dropdown.active .dropdown-menu {
      max-height: none;
    }

    .dropdown-menu li a {
      padding: 0.75rem 1.5rem;
    }

    .dropdown-menu li a:hover {
      background: var(--light-sage);
      color: var(--olive-green);
    }

    /* Transitioning class for smooth fade */
    .header.transitioning .logo,
    .header.transitioning .header-actions,
    .header.transitioning .nav {
      opacity: 0.7;
    }

    /* Condensed header on scroll - single line layout */
    .header.scrolled {
      box-shadow: var(--shadow-md);
    }

    .header.scrolled .header-top {
      border-bottom: none;
    }

    .header.scrolled .header-content {
      padding: 0.4rem 0;
      flex-wrap: nowrap;
      gap: 2rem;
    }

    .header.scrolled .logo {
      order: 1;
    }

    .header.scrolled .logo img {
      height: 55px;
      margin-bottom: 12px;
    }

    .header.scrolled .nav {
      order: 2;
      width: auto;
      flex: 1;
    }

    .header.scrolled .header-actions {
      gap: 1rem;
      order: 3;
    }

    .header.scrolled .header-actions .btn {
      font-size: 14px;
      padding: 0.625rem 1.25rem;
      min-height: 42px;
    }

    .header.scrolled .nav-menu {
      gap: 1rem;
      padding: 0;
    }

    .header.scrolled .nav-menu > li > a {
      padding: 0.5rem 0.875rem;
      font-size: 14px;
    }
  }
</style>

<script>
  // Quote button handler - opens the quote modal
  // Note: The actual modal opening is handled by QuoteModal.astro's global click listener
  // which detects clicks on elements with id 'quoteBtn'

  // Mobile menu toggle
  const mobileToggle = document.querySelector('.mobile-menu-toggle');
  const nav = document.querySelector('.nav');
  const body = document.body;

  if (mobileToggle && nav) {
    mobileToggle.addEventListener('click', () => {
      const isActive = nav.classList.toggle('active');
      mobileToggle.classList.toggle('active');

      // Prevent body scroll when menu is open on mobile
      if (window.innerWidth < 1025) {
        if (isActive) {
          body.style.overflow = 'hidden';
        } else {
          body.style.overflow = '';
        }
      }
    });
  }

  // Mobile dropdown toggle
  const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
  dropdownToggles.forEach(toggle => {
    toggle.addEventListener('click', (e) => {
      if (window.innerWidth < 1025) {
        e.preventDefault();
        const parent = toggle.closest('.has-dropdown');
        parent.classList.toggle('active');
      }
    });
  });

  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (window.innerWidth < 1025 && nav && mobileToggle) {
      if (!e.target.closest('.header') && nav.classList.contains('active')) {
        nav.classList.remove('active');
        mobileToggle.classList.remove('active');
        body.style.overflow = '';
      }
    }
  });

  // Close mobile menu on window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 1025 && nav) {
      nav.classList.remove('active');
      if (mobileToggle) mobileToggle.classList.remove('active');
      body.style.overflow = '';
    }
  });

  // Active page detection
  const currentPath = window.location.pathname;
  const navLinks = document.querySelectorAll('.nav-menu > li > a:not(.dropdown-toggle)');

  navLinks.forEach(link => {
    const href = link.getAttribute('href');
    if (href === currentPath || (currentPath === '/' && href === '/')) {
      link.classList.add('active');
    }
  });

  // Condensed header on scroll (desktop only)
  const header = document.querySelector('.header');
  let ticking = false;
  let isScrolled = false;
  let scrollTimeout = null;
  let lastStateChange = 0;
  const SCROLL_THRESHOLD_DOWN = 200; // Scroll down this much to condense
  const SCROLL_THRESHOLD_UP = 50;    // Scroll up to this point to expand
  const MIN_STATE_CHANGE_INTERVAL = 300; // Minimum ms between state changes

  function handleScroll() {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const now = Date.now();

    // Only apply on desktop
    if (window.innerWidth >= 1025) {
      // Prevent state changes too close together
      const timeSinceLastChange = now - lastStateChange;

      // Use hysteresis to prevent flickering with wider gap
      if (!isScrolled && scrollTop > SCROLL_THRESHOLD_DOWN && timeSinceLastChange > MIN_STATE_CHANGE_INTERVAL) {
        // Transition to condensed state
        isScrolled = true;
        lastStateChange = now;

        // Add transitioning class for smooth fade
        header?.classList.add('transitioning');

        // Wait a tiny bit for fade out, then change layout
        requestAnimationFrame(() => {
          header?.classList.add('scrolled');

          // Remove transitioning class after layout change
          setTimeout(() => {
            header?.classList.remove('transitioning');
          }, 100);
        });
      } else if (isScrolled && scrollTop < SCROLL_THRESHOLD_UP && timeSinceLastChange > MIN_STATE_CHANGE_INTERVAL) {
        // Transition to expanded state
        isScrolled = false;
        lastStateChange = now;

        // Add transitioning class for smooth fade
        header?.classList.add('transitioning');

        // Wait a tiny bit for fade out, then change layout
        requestAnimationFrame(() => {
          header?.classList.remove('scrolled');

          // Remove transitioning class after layout change
          setTimeout(() => {
            header?.classList.remove('transitioning');
          }, 100);
        });
      }
    } else {
      isScrolled = false;
      header?.classList.remove('scrolled');
    }

    ticking = false;
  }

  // Debounced scroll handler
  function debouncedScroll() {
    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(() => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          handleScroll();
        });
        ticking = true;
      }
    }, 10); // Small debounce delay
  }

  // Use passive listener for better scroll performance
  window.addEventListener('scroll', debouncedScroll, { passive: true });

  // Handle resize to remove scrolled class on mobile
  window.addEventListener('resize', () => {
    if (window.innerWidth < 1025) {
      isScrolled = false;
      header?.classList.remove('scrolled');
    } else {
      handleScroll();
    }
  });

  // Initial check on page load
  if (window.innerWidth >= 1025) {
    handleScroll();
  }
</script>
